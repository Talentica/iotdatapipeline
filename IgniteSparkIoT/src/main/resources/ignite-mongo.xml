<?xml version="1.0" encoding="UTF-8"?>

<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!-- Ignite configuration with all defaults and enabled p2p deployment and 
	enabled events. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">


	<bean id="ignite.cfg" class="org.apache.ignite.configuration.IgniteConfiguration">
		<!-- Set to true to enable distributed class loading for examples, default 
			is false. -->
		<property name="peerClassLoadingEnabled" value="true" />
		<property name="gridName" value="grid1" />

		<property name="cacheConfiguration">
			<list>

				<!-- Temperature measurements cache. -->
				<bean class="org.apache.ignite.configuration.CacheConfiguration">
					<property name="name" value="TemperatureCache" />
					<property name="backups" value="1" />

					<property name="cacheStoreFactory">
						<!--<bean class="javax.cache.configuration.FactoryBuilder$SingletonFactory">-->
						<bean class="javax.cache.configuration.FactoryBuilder" factory-method="factoryOf">
							<constructor-arg>
                                <bean class="com.talentica.iot.cachestore.MongoCacheStore"></bean>
                            </constructor-arg>
						</bean>
					</property>

					<!-- Enable store usage. -->
					<!-- Sets flag indicating whether read from database is enabled. -->
					<property name="readThrough" value="true"/>

					<!-- Sets flag indicating whether write to database is enabled. -->
					<property name="writeThrough" value="true"/>

					<!-- Enable database batching. -->
					<!-- Sets flag indicating whether write-behind is enabled. -->
					<property name="writeBehindEnabled" value="true"/>

					<!-- Setting expiration policy -->
					<property name="expiryPolicyFactory">
						<bean class="javax.cache.configuration.FactoryBuilder"
							factory-method="factoryOf">
							<constructor-arg>
								<bean class="javax.cache.expiry.CreatedExpiryPolicy">
									<constructor-arg>
										<bean class="javax.cache.expiry.Duration">
											<constructor-arg index="0" value="SECONDS" />
											<constructor-arg index="1" value="60" />
										</bean>
									</constructor-arg>
								</bean>
							</constructor-arg>
						</bean>
					</property>

					<property name="eagerTtl" value="true" />

					<property name="queryEntities">
						<list>
							<bean class="org.apache.ignite.cache.QueryEntity">
								<!-- Key Type -->
								<property name="keyType" value="com.talentica.iot.domain.TempKey" />
								<!-- Value Type -->
								<property name="valueType" value="com.talentica.iot.domain.TemperatureMongo" />

								<!-- Fields to be used from SQL -->
								<property name="fields">
									<map>
										<entry key="sensorId" value="java.lang.Integer" />
										<entry key="ts" value="java.util.Date" />
										<entry key="uuid" value="java.util.UUID" />
										<entry key="temp" value="com.talentica.iot.domain.TemperatureMongo" />
									</map>
								</property>

								<!-- Assign an unique name for the value to access it from SQL easily. -->
								<property name="valueFieldName" value="temp" />

								<!-- Defining indexed fields. -->
								<property name="indexes">
									<list>
										<!-- Single field (aka. column) index -->
										<bean class="org.apache.ignite.cache.QueryIndex">
											<constructor-arg value="temp" />
										</bean>

										<!-- Single field (aka. column) index -->
										<bean class="org.apache.ignite.cache.QueryIndex">
											<constructor-arg value="sensorId" />
										</bean>

										<!-- Single field (aka. column) index -->
										<bean class="org.apache.ignite.cache.QueryIndex">
											<constructor-arg value="ts" />
										</bean>

										<bean class="org.apache.ignite.cache.QueryIndex">
											<constructor-arg value="uuid" />
										</bean>

										<!-- Group index. -->
										<bean class="org.apache.ignite.cache.QueryIndex">
											<constructor-arg>
												<list>
													<value>sensorId</value>
													<value>ts</value>
												</list>
											</constructor-arg>
											<constructor-arg value="SORTED" />
										</bean>
									</list>
								</property>
							</bean>
						</list>
					</property>
				</bean>
			</list>
		</property>

		<!-- Setting up affinity collocation with Spring XML configuration. -->
		<property name="cacheKeyConfiguration">
			<list>
				<bean class="org.apache.ignite.cache.CacheKeyConfiguration">
					<property name="typeName" value="com.talentica.iot.domain.TempKey" />
					<property name="affinityKeyFieldName" value="sensorId" />
				</bean>
			</list>
		</property>


		<!-- Explicitly configure TCP discovery SPI to provide list of initial 
			nodes. -->
		<property name="discoverySpi">
			<bean class="org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi">
				<property name="ipFinder">
					<!-- Uncomment static IP finder to enable static-based discovery of 
						initial nodes. -->
					<bean
						class="org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder">
						<property name="addresses">
							<list>
								<value>localhost:47500..47509</value>
							</list>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>
</beans>
